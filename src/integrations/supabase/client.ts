
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://kaebtzbmtozoqvsdojkl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImthZWJ0emJtdG96b3F2c2RvamtsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4NzM5NTIsImV4cCI6MjA1NzQ0OTk1Mn0.Q6o77e2NGxGYZ0kuckJfw521QmYQXER2e_cn15q3-bs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to get direct public URL for media files
export const getMediaUrl = (bucket: string, path: string): string => {
  // Ensure the path doesn't start with a slash
  const cleanPath = path.startsWith('/') ? path.substring(1) : path;
  return `${SUPABASE_URL}/storage/v1/object/public/${bucket}/${cleanPath}`;
};

// Helper function to get signed URL with token for protected files
export const getSignedUrl = async (bucket: string, path: string, expiresIn = 60 * 60): Promise<string | null> => {
  try {
    const { data, error } = await supabase
      .storage
      .from(bucket)
      .createSignedUrl(path, expiresIn);
    
    if (error) {
      console.error("Error creating signed URL:", error);
      return null;
    }
    
    return data.signedUrl;
  } catch (err) {
    console.error("Error in getSignedUrl:", err);
    return null;
  }
};

// Check if a file exists in a bucket
export const checkFileExists = async (bucket: string, path: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .storage
      .from(bucket)
      .list('', {
        limit: 100,
        offset: 0,
        sortBy: { column: 'name', order: 'asc' },
      });
    
    if (error) {
      console.error("Error checking file existence:", error);
      return false;
    }
    
    return data.some(file => file.name === path);
  } catch (err) {
    console.error("Error in checkFileExists:", err);
    return false;
  }
};

// Optional: Helper to handle the image/gallery URL fields
export const transformPropertyData = (property: any) => {
  // If the data comes from an older schema with 'image' and 'images'
  if (property.image && !property.featured_image_url) {
    property.featured_image_url = property.image;
  }
  
  if (property.images && !property.gallery_image_urls) {
    property.gallery_image_urls = property.images;
  }
  
  // Ensure features is an array
  if (property.features && typeof property.features === 'string') {
    try {
      property.features = JSON.parse(property.features);
    } catch (e) {
      property.features = [];
    }
  } else if (!property.features) {
    property.features = [];
  }
  
  // Ensure gallery_image_urls is an array
  if (property.gallery_image_urls && typeof property.gallery_image_urls === 'string') {
    try {
      property.gallery_image_urls = JSON.parse(property.gallery_image_urls);
    } catch (e) {
      property.gallery_image_urls = [];
    }
  } else if (!property.gallery_image_urls) {
    property.gallery_image_urls = [];
  }
  
  return property;
};
