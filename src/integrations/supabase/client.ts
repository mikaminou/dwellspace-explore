// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database, Json } from './types';

const SUPABASE_URL = "https://kaebtzbmtozoqvsdojkl.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImthZWJ0emJtdG96b3F2c2RvamtsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4NzM5NTIsImV4cCI6MjA1NzQ0OTk1Mn0.Q6o77e2NGxGYZ0kuckJfw521QmYQXER2e_cn15q3-bs";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to get direct public URL for media files
export const getMediaUrl = (bucket: string, path: string): string => {
  // Ensure the path doesn't start with a slash
  const cleanPath = path.startsWith('/') ? path.substring(1) : path;
  return `${SUPABASE_URL}/storage/v1/object/public/${bucket}/${cleanPath}`;
};

// Helper function to get signed URL with token for protected files
export const getSignedUrl = async (bucket: string, path: string, expiresIn = 60 * 60): Promise<string | null> => {
  try {
    const { data, error } = await supabase
      .storage
      .from(bucket)
      .createSignedUrl(path, expiresIn);
    
    if (error) {
      console.error("Error creating signed URL:", error);
      return null;
    }
    
    return data.signedUrl;
  } catch (err) {
    console.error("Error in getSignedUrl:", err);
    return null;
  }
};

// Check if a file exists in a bucket
export const checkFileExists = async (bucket: string, path: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase
      .storage
      .from(bucket)
      .list('', {
        limit: 100,
        offset: 0,
        sortBy: { column: 'name', order: 'asc' },
      });
    
    if (error) {
      console.error("Error checking file existence:", error);
      return false;
    }
    
    return data.some(file => file.name === path);
  } catch (err) {
    console.error("Error in checkFileExists:", err);
    return false;
  }
};

// Helper to transform the property data from Supabase to the app's expected format
export const transformPropertyData = (property: any) => {
  if (!property) return null;
  
  // Handle different field names between old and new schema
  const transformedProperty = {
    ...property,
    // Use featured_image_url, falling back to image if needed
    featured_image_url: property.featured_image_url || property.image || '',
    // Use gallery_image_urls, falling back to images if needed
    gallery_image_urls: property.gallery_image_urls || property.images || [],
  };
  
  // Ensure features is always an array of strings
  if (typeof transformedProperty.features === 'string') {
    try {
      transformedProperty.features = JSON.parse(transformedProperty.features);
    } catch (e) {
      transformedProperty.features = [];
    }
  } else if (Array.isArray(transformedProperty.features)) {
    // It's already an array, keep as is
  } else if (transformedProperty.features && typeof transformedProperty.features === 'object') {
    // It's a JSONB object from Supabase, convert to array if possible
    transformedProperty.features = Object.values(transformedProperty.features);
  } else {
    transformedProperty.features = [];
  }
  
  // Ensure gallery_image_urls is always an array of strings
  if (typeof transformedProperty.gallery_image_urls === 'string') {
    try {
      transformedProperty.gallery_image_urls = JSON.parse(transformedProperty.gallery_image_urls);
    } catch (e) {
      transformedProperty.gallery_image_urls = [];
    }
  } else if (Array.isArray(transformedProperty.gallery_image_urls)) {
    // It's already an array, keep as is
  } else if (transformedProperty.gallery_image_urls && typeof transformedProperty.gallery_image_urls === 'object') {
    // It's a JSONB object from Supabase, convert to array if possible
    transformedProperty.gallery_image_urls = Object.values(transformedProperty.gallery_image_urls);
  } else {
    transformedProperty.gallery_image_urls = [];
  }
  
  return transformedProperty;
};
